{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid101\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid201\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid301\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid401\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid402\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid501\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid502\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid601\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid701\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid801\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid901\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}}
\margl1440\margr1440\vieww11660\viewh8420\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 Ruby Style Guide Notes from: {\field{\*\fldinst{HYPERLINK "https://github.com/bbatsov/ruby-style-guide"}}{\fldrslt https://github.com/bbatsov/ruby-style-guide}}\
\
\ul Source Code Layout\ulnone \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\uc0\u8259 	}BE CONSISTENT in your coding.\
{\listtext	\uc0\u8259 	}UTF-8 as source file encoding\
{\listtext	\uc0\u8259 	}2-spaces per indentation (no tabs)\
{\listtext	\uc0\u8259 	}One expression per line. Don't use " ; " for multi expressions on 1 line. ","=OK\
{\listtext	\uc0\u8259 	}Single-line for Class definitions with no body\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}OK: 		class FooError < StandardError; end\
{\listtext	\uc0\u8259 	}Better: 		FooError = Class.new(StandardError)\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\uc0\u8259 	}Avoid single-line methods like "def no_braces_method; body; end" (unless empty)\
{\listtext	\uc0\u8259 	}Use spaces around commas, operators, colons, semicolons, around \{ & \}. \
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}Exception: exponent: a**2\
{\listtext	\uc0\u8259 	}Exception2: brackets \{\} only need space on the outside. BUT recommend spaces both sides\
{\listtext	\uc0\u8259 	}Exception3: embedded string expressions recommended #\{_stuff_\} to #\{ _stuff_ \} but either OK\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\uc0\u8259 	}No spaces outside of ( ) or [ ] \
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}some(arg).other\
{\listtext	\uc0\u8259 	}[1, 2, 3].length\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\uc0\u8259 	}No space after " ! ". \
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}!something   NOT ! something\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\uc0\u8259 	}Case should be at the same level of indent as all of the "when"'s. This is debated, but is taught this wy\
{\listtext	\uc0\u8259 	}Align the case & whens in situations where assigning values to them\
{\listtext	\uc0\u8259 	}Use empty lines between method definitions & to break up method internals into logical paragraphs\
{\listtext	\uc0\u8259 	}Use spaces around the " = " when assigning values in Method Parameters\
{\listtext	\uc0\u8259 	}Avoid " \\ " (the line continuation) when not required. It's still ugly even when required tho\'85\
{\listtext	\uc0\u8259 	}When continuing a method invocation (call) chain to the next line, indent & start with the period " .__ "\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}Bad: 		one.two.three.\uc0\u8232 				four\
{\listtext	\uc0\u8259 	}Good:		one.two.three\uc0\u8232 				.four\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\uc0\u8259 	}If parameters of a method call span more than one line, wrap all to the next & align them:\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}def send_mail(source)\uc0\u8232 	mailer.deliver(	body: "______",\u8232 				to: "_______",\u8232 				from: "_______",\u8232 				subject: "______",)\
{\listtext	\uc0\u8259 	}
\i note: can align all on a single-indent in, instead of starting at the main line first parameter\uc0\u8232 	
\i0 mailer.deliver(	\uc0\u8232 		to: "_______",\u8232 		from: "_______",\u8232 		subject: "______",\u8232 	)\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\uc0\u8259 	}If an array goes multiple lines, align the first items on each line\
{\listtext	\uc0\u8259 	}On big numbers, use " _ " for readability. (not commas - they break ruby)\
{\listtext	\uc0\u8259 	}Don't use comment blocks in coding - hard to spot & cannot be preceded by whitespace. Just use normal #comments.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \ul \ulc0 Syntax\ulnone \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls2\ilvl0\cf0 {\listtext	\uc0\u8259 	}Only use :: to reference constraints. Never use for regular method invocation.\
{\listtext	\uc0\u8259 	}Use parenthesis for methods with arguments. Leave them off for methods without. ie: no ()\
{\listtext	\uc0\u8259 	}Almost never use "for". There are other ways. Another problem is for's variable scope not limited.\
{\listtext	\uc0\u8259 	}Never use "then" in a multi-line " if " statement\
{\listtext	\uc0\u8259 	}Always put the " if " condition on the same line as the " if "\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls2\ilvl0
\b \cf0 {\listtext	\uc0\u8259 	}Use the ?: constructs instead of the if/then/else/end. 
\b0 #gotta study this way of writing - seems good!\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}This is called the "ternary operator"\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls2\ilvl0\cf0 {\listtext	\uc0\u8259 	}Use one expression per ternary operator #not sure I understand this...\
{\listtext	\uc0\u8259 	}Never use if " x: \'85 ". It was removed in Ruby1.9. Use ternary operator instead.\
{\listtext	\uc0\u8259 	}Use ! instead of " not ". Don't use "and" or "or" use && or ||.\
{\listtext	\uc0\u8259 	}Don't use " !! "\
{\listtext	\uc0\u8259 	}Avoid multi-line ?: statements. Use the If statement instead.\
{\listtext	\uc0\u8259 	}Single-line body statements should use the if/unless statement or && / ||\
{\listtext	\uc0\u8259 	}Use "unless" for negative conditions (instead of " if " )\
{\listtext	\uc0\u8259 	}Never use " unless " with " else " \
{\listtext	\uc0\u8259 	}Don't use parenthesis around if/unless/while/until\
{\listtext	\uc0\u8259 	}Never use " do " with a multi-line while/until.\
{\listtext	\uc0\u8259 	}Use while/until on a single-line with no "end" when have single-line body\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}do_something while some_condition\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls2\ilvl0\cf0 {\listtext	\uc0\u8259 	}Use "until" (not while) if the condition is negative\
{\listtext	\uc0\u8259 	}Use Kernel#loop (loop/do/unless/end) with break, rather than begin/end/until or begin/end/while\
{\listtext	\uc0\u8259 	}Omit parenthesis for methods that are part of an internal DSL (eg: rake, rails, spec)\
{\listtext	\uc0\u8259 	}Omit the outer braces around an implicit hash\
{\listtext	\uc0\u8259 	}Omit parenthesis for method calls with no arguments\
{\listtext	\uc0\u8259 	}Use " \{ \} " instead of do/end for single-line blocks\
{\listtext	\uc0\u8259 	}Avoid using " \{ \} " for multi-line blocks.\
{\listtext	\uc0\u8259 	}Always use do/end for "flow control" statements & "method definitions"\
{\listtext	\uc0\u8259 	}Avoid do/end when chaining\
{\listtext	\uc0\u8259 	}Avoid "return" when not required for flow control (just put the name of what you want to return)\
{\listtext	\uc0\u8259 	}Avoid "self" where not required (only required when calling a self-write accessor)\
{\listtext	\uc0\u8259 	}As a corollary, avoid shadowing methods with local variables, unless they're both equivalent.\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}##Don't get this one yet - look up when more advanced\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls2\ilvl0\cf0 {\listtext	\uc0\u8259 	}Don't assign things in the conditional (such as an " if "), unless wrap the assignment in parenthesis. \
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}Better just to assign before & then test the variable.\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls2\ilvl0\cf0 {\listtext	\uc0\u8259 	}Use the ||= to freely initialize variables. (checks to see if they're already used, if not, then uses)\
{\listtext	\uc0\u8259 	}Don't use ||= to assign boolean values 	(because it writes over 
\i false
\i0  & nil)\
{\listtext	\uc0\u8259 	}Avoid explicit use of the case equality operator " === ". Only to be used by case expressions. \
{\listtext	\uc0\u8259 	}Don't use Perl-style special variables " $: ", " $; ", etc. Suggests the " require 'English' " Ruby library. \
{\listtext	\uc0\u8259 	}Never put a space between a method name & the opening parenthesis\
{\listtext	\uc0\u8259 	}If the first argument begins with an open parenthesis, always use parenthesis in the method invocatn\
{\listtext	\uc0\u8259 	}Always run the ruby interpreter with the -w option, so it'll warn you if you forgot any of the rules!\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls2\ilvl0
\b \cf0 {\listtext	\uc0\u8259 	}Use the new lambda literal syntax for single-line body blocks.
\b0  #Probably need to learn this syntax\
{\listtext	\uc0\u8259 	}Use proc instead of Proc.new\
{\listtext	\uc0\u8259 	}Use proc.call() instead of proc[] or proc.()\
{\listtext	\uc0\u8259 	}Use the " _ " for unused block parameters\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}hash.each\{ |_, valu|  puts value\}	#do this since "key" isn't being used\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls2\ilvl0\cf0 {\listtext	\uc0\u8259 	}#some other $stderr & warn, sprint & format styles in here. Look if need.\
{\listtext	\uc0\u8259 	}Use Array#join instead of Array#*. \
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls2\ilvl1\cf0 {\listtext	
\b \uc0\u8259 	}
\b0 it shows the %w(___ ___ ___ ) format. Should probably learn this syntax\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls2\ilvl0\cf0 {\listtext	\uc0\u8259 	}Use [*var] or Array() instead of an explicit variable you want to treat as an array but aren't sure is one\
{\listtext	\uc0\u8259 	}Use ranges Comparable#between? instead of complex comparison logic ##cool for quick narrowing\
{\listtext	\uc0\u8259 	}Use methods instead of comparison checks (using ==) to check. == can be used with numbers.\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}Use if  x.even?\'85  instead of  if x%2==0\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls2\ilvl0\cf0 {\listtext	\uc0\u8259 	}Avoid use of "BEGIN" blocks\
{\listtext	\uc0\u8259 	}Never use END blocks. Use " Kernel#at_exit " instead\
{\listtext	\uc0\u8259 	}Avoid use of flip-flops		#what is this?\
{\listtext	\uc0\u8259 	}Avoid use of nested conditionals. Nested conditionals are messy with indenting - "return unless __ can be much easier. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \ul Naming\ulnone \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls3\ilvl0\cf0 {\listtext	\uc0\u8259 	}Name identifiers should be in standard English language\
{\listtext	\uc0\u8259 	}Use "snake_case" for symbols, methods, and variables\
{\listtext	\uc0\u8259 	}Use CamelCase for classes & modules (Acronyms are OK too - XML, HTTP, etc)\
{\listtext	\uc0\u8259 	}Use SCREAMING_SNAKE_CASE for constants		#eg: SOME_CONSTANT = 5\
{\listtext	\uc0\u8259 	}Use a " ! " at the end of potentially dangerous methods, IF there is a safe version of that same method\
{\listtext	\uc0\u8259 	}Similarly, define the safe method in terms of the dangerous one by leaving the " ! " off.\
{\listtext	\uc0\u8259 	}When using " reduce " with short blocks, name the elements |a, e| for accumulator & element\
{\listtext	\uc0\u8259 	}When defining binary operators, name the argument " other " (<< & [ ] are exceptions to the rule)\
{\listtext	\uc0\u8259 	}Use the first over the second, unless readability requires otherwise. Prefer:\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls3\ilvl1\cf0 {\listtext	\uc0\u8259 	}map instead of collect\
{\listtext	\uc0\u8259 	}find instead of detect\
{\listtext	\uc0\u8259 	}select instead of find_all\
{\listtext	\uc0\u8259 	}reduce instead of inject\
{\listtext	\uc0\u8259 	}side instead of length\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls3\ilvl0\cf0 {\listtext	\uc0\u8259 	}Use flat_map instead of map + flatten. This does not apply for arrays inside of arrays. Then use m+f\
{\listtext	\uc0\u8259 	}Use reverse_each instead of reverse.each.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \ul Comments\ulnone \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls4\ilvl0\cf0 {\listtext	\uc0\u8259 	}Write self-documenting code and ignore all of this section\
{\listtext	\uc0\u8259 	}Write comments in English\
{\listtext	\uc0\u8259 	}Use pen space between the leading # and the text\
{\listtext	\uc0\u8259 	}Commants larger than a word are capitalized & use punctuation. Use 1 space after periods.\
{\listtext	\uc0\u8259 	}Avoid superfluous comments. (ones that just repeat the obvious code. Tell concept, not code)\
{\listtext	\uc0\u8259 	}Keep existing comments put to date. But an outdated comment is worse than no comment at all.\
{\listtext	\uc0\u8259 	}MAKE THE CODE SELF-EXPLANATORY. Avoid using comments to explain bad code.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \ul Comment Annotations\ulnone \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls5\ilvl0\cf0 {\listtext	\uc0\u8259 	}Annotations should be written on the line immediately above the relevant code\
{\listtext	\uc0\u8259 	}The annotation keyword is followed by a semi-colon and a space, then a note describing the problem\
{\listtext	\uc0\u8259 	}If multiple lines required to describe the problem, use subsequent lines with a 2-space indent\
{\listtext	\uc0\u8259 	}In cases where problem is so obvious that documentation would be redundant, just leave the #.\
{\listtext	\uc0\u8259 	}Use TODO to note missing features or functionality that should be added later\
{\listtext	\uc0\u8259 	}Use FIXME to note broken code\
{\listtext	\uc0\u8259 	}Use OPTIMIZE to note slow or inefficient code that may cause performance problems\
{\listtext	\uc0\u8259 	}Use HACK to note code smells where questionable coding practices were used & need change\
{\listtext	\uc0\u8259 	}Use REVIEW to note anything that should be looked at to confirm working as intended\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}eg: REVIEW: Are we sure this is how client still does this?\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls5\ilvl0\cf0 {\listtext	\uc0\u8259 	}Custom annotations - may be used if appropriate. Include them in the program README if do.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \ul Classes & Methods\ulnone \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls6\ilvl0\cf0 {\listtext	\uc0\u8259 	}Use consistent structure in your class definitions\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls6\ilvl1\cf0 {\listtext	1.	}class Name\
{\listtext	2.	}extend/include/require\
{\listtext	3.	}CONSTANTS\
{\listtext	4.	}attr_macros\
{\listtext	5.	}other macros\
{\listtext	6.	}public Class methods\
{\listtext	7.	}Public instance methods\
{\listtext	8.	}protected methods\
{\listtext	9.	}private methods\
{\listtext	10.	}end\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls6\ilvl0\cf0 {\listtext	\uc0\u8259 	}Prefer Modules to Classes only with class methods. Classes used only when makes sense to create instances out of them.\
{\listtext	\uc0\u8259 	}Prefer "module_function" over " extend self " when don't want to turn instance into class methods\
{\listtext	\uc0\u8259 	}When designing class hierarchies, make sure they confirm to the Liskov Substitution Principle\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}http://en.wikipedia.org/wiki/Liskov_substitution_principle\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls6\ilvl0\cf0 {\listtext	\uc0\u8259 	}Try to make classes as SOLID as possible\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls6\ilvl0\cf0 {\listtext	\uc0\u8259 	}Always supply a proper to_s method for classes that represent domain objects. Making this a new (seemingly over-write) method inside of the specific Class.  ###???\
{\listtext	\uc0\u8259 	}Use the attr family of functions to define trivial accessors or mutators\
{\listtext	\uc0\u8259 	}Avoid the use of attr. Use attr_reader & attr_accessor instead.\
{\listtext	\uc0\u8259 	}Consider using Struct.new - which defines trivial accessors, constructors, & comparison operators 4 u\
{\listtext	\uc0\u8259 	}Don't extend Struct.new - it is already a new Class. Extending introduces superfluous class level + err\
{\listtext	\uc0\u8259 	}Considering adding factory methods to provide additional sensible ways to create instances of a Clas\
{\listtext	\uc0\u8259 	}Prefer duck-typing over inheretance\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}http://en.wikipedia.org/wiki/Duck_typing\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls6\ilvl0\cf0 {\listtext	\uc0\u8259 	}Avoid @@ Class variables due to their "nasty" behavior in inheritance \
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}#appears to be exceptions in this note\'85\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls6\ilvl0\cf0 {\listtext	\uc0\u8259 	}Assign proper visibility to methods (private, protected) per intended use. Don't leave stuff in public.\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\ql\qnatural\pardirnatural
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}This is because Ruby is not as inherently protective as, say, Python. \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls6\ilvl0\cf0 {\listtext	\uc0\u8259 	}Indent the public, protected, and private method Labels as much as the defs they apply to.\
{\listtext	\uc0\u8259 	}Use def "self.method" to define singleton methods. Makes code easier to refractor since name not repeated.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \ul Exceptions\ulnone \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls7\ilvl0\cf0 {\listtext	\uc0\u8259 	}Signal exceptions using the "fail" method. Use raise only when catching an exception & re-raising it. This is because it is not a failure, it is a purposeful raising.\
{\listtext	\uc0\u8259 	}Done specify RuntimeError explicitly in the two-argument version of raise/fail. (signaled by default!)\
{\listtext	\uc0\u8259 	}Prefer supplying an exception class & message as two separate arguments to fail/raise, instead of exception instance.\
{\listtext	\uc0\u8259 	}Never return from an " ensure " block. If you do, the return will take precedence over the exception - Thus, the exception will be silently thrown away!\
{\listtext	\uc0\u8259 	}Use implicit begin blocks where possible (ie: don't call " begin " at the beginning.\
{\listtext	\uc0\u8259 	}Mitigate "begin" blocks by using contingency methods\
{\listtext	\uc0\u8259 	}Don't suppress exceptions (example uses a useless rescue to supress it)\
{\listtext	\uc0\u8259 	}Avoid using "rescue" in its modifier form\
{\listtext	\uc0\u8259 	}Don't use exceptions for flow control (to direct the code)\
{\listtext	\uc0\u8259 	}Avoid rescuing the Exception class. Traps signals/calls to exit - requiring you to "kill -9" the process\
{\listtext	\uc0\u8259 	}Put more specific exceptions higher up in the rescue chain, else they'll never be rescued from\
{\listtext	\uc0\u8259 	}Release external resources obtained by the program in an ensure block #???\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \ul Collections\ulnone \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls8\ilvl0\cf0 {\listtext	\uc0\u8259 	}Prefer literal array & hash creation notation (unless need to pass their parameters to constructors)\
{\listtext	\uc0\u8259 	}Prefer %w to the literal array syntax when you need an array of words (non-empty strings without spaces & special chars in them). Apply this rule only to arrays with 2+ elements.\
{\listtext	\uc0\u8259 	}Prefer %i to the literal array syntax when need an array of symbols (& don't need Ruby 1.9 compatibility). Apply to arrays of 2+ elements.\
{\listtext	\uc0\u8259 	}Avoid creation of huge gaps in arrays. (ie: arr[100] = 1)\'85 spot 101 = 1, and others = nil.\
{\listtext	\uc0\u8259 	}When accessing first/last element of array, prefer .first or .last over [0] or [-1]\
{\listtext	\uc0\u8259 	}Use "Set" instead of "Array" when dealing with unique elements. Set implements collection of unordered values with no duplicates. This is a hybrid of Arrays inter-operation facilitates & Hash's fast lookup. 
\b  #This is a good one to know\
\ls8\ilvl0
\b0 {\listtext	\uc0\u8259 	}Prefer symbols instead of strings as hash keys\
{\listtext	\uc0\u8259 	}Avoid use of 
\i mutable
\i0  objects as hash keys\
{\listtext	\uc0\u8259 	}Use the literal hash syntax when your hash keys are symbols\
{\listtext	\uc0\u8259 	}Use Hash#key? instead of Hash#has_key. Longer form is considered deprecated\
{\listtext	\uc0\u8259 	}Use Hash#value? instead of Hash#has_value. Longer form is considered deprecated\
{\listtext	\uc0\u8259 	}Use Hash#fetch when dealing with hash keys that should be prevent. 
\i Helps with error handling.\
\ls8\ilvl0
\i0 {\listtext	\uc0\u8259 	}Introduce default values for hash keys using Hash#fetch as opposed to custom logic\
{\listtext	\uc0\u8259 	}Prefer the use of block instead of the default value in Hash#fetch.\
{\listtext	\uc0\u8259 	}Rely on the fact that Ruby1.9 hashes are ordered\
{\listtext	\uc0\u8259 	}Never modify a collection while traversing it!\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \ul Strings\ulnone \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls9\ilvl0\cf0 {\listtext	\uc0\u8259 	}Prefer string interpolation instead of string concatenation (using #\{\} instead of " + ")\
{\listtext	\uc0\u8259 	}Consider padding string interpolation with space for readability\
{\listtext	\uc0\u8259 	}Prefer single-quoted strings when you don't need string interpolation or special symbols like " \\ "\
{\listtext	\uc0\u8259 	}Don't use the character literal syntax ?x.  #never heard of this. good. ignore this capability.\
{\listtext	\uc0\u8259 	}Don't leave out the ' \{ \} ' around instance & global variables being interpolated into a string\
{\listtext	\uc0\u8259 	}Avoid String#+ when need to construct large data chunks. Instead use String#<<. Concatenation mutates the string instance in-place & is always faster than String#+ that creates a bunch of new string objects. \
{\listtext	\uc0\u8259 	}When using heredocs for multi-line strings, keep in mind they preserve leading whitespace. Employ some margin to trim the excess whitespace.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 ------Skipped 2 confusing sections on Percent Literals & Metaprogramming------\
\ul Misc\ulnone \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls10\ilvl0\cf0 {\listtext	\uc0\u8259 	}Write ruby -w safe code\
{\listtext	\uc0\u8259 	}Avoid hashes as optional parameters. Does the method do too much? (Exception: object initializers)\
{\listtext	\uc0\u8259 	}Avoid methods longer than 10 LOC (lines of code). Ideally, most will be shorter than 5 LOC.\
{\listtext	\uc0\u8259 	}Avoid parameter lists longer than 3-4 parameters\
{\listtext	\uc0\u8259 	}If you really need "global" methods, add them to Kernel & make them private.\
{\listtext	\uc0\u8259 	}Use module instance variables instead of global variables. ????not sure what this is yet\
{\listtext	\uc0\u8259 	}Avoid "alias" when alias_method will do.\
{\listtext	\uc0\u8259 	}Use "OptionParser" for parsing complex command line options & "ruby -s" for trivial command line opt\
{\listtext	\uc0\u8259 	}Prefer Time.now over Time.new when retrieving current system time\
{\listtext	\uc0\u8259 	}Code in functional way - avoiding mutation when that makes sense\
{\listtext	\uc0\u8259 	}Don't mutate arguments unless that's the purpose of the method\
{\listtext	\uc0\u8259 	}Avoid more than 3 levels of block nesting\
{\listtext	\uc0\u8259 	}Be consistent (in an ideal world - consistent with these guidelines)\
{\listtext	\uc0\u8259 	}Use common (to others) sense.}